
# -*- coding: utf-8 -*-
import asyncio
import json
import os
import re
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError

# --- CONFIG ---
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')  # token @botfather
OWNER_ID = int(os.getenv('OWNER_ID', '0'))  # admin id
DATA_FILE = 'users.json'
SESSION_DIR = 'sessions'

os.makedirs(SESSION_DIR, exist_ok=True)

# --- BOT INIT (aiogram v3+) ---
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# --- STATES ---
class Form(StatesGroup):
    add_user = State()
    api_id = State()
    api_hash = State()
    phone = State()
    code = State()
    password = State()
    text = State()
    chat_id = State()
    delete_chat = State()
    interval = State()

# --- USER DATA MANAGEMENT ---
def load_users():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f)
    with open(DATA_FILE, encoding='utf-8') as f:
        return json.load(f)

def save_users(users):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

def is_user(uid):
    users = load_users()
    return str(uid) in users or uid == OWNER_ID

def get_user(uid):
    return load_users().get(str(uid))

def set_user(uid, data):
    users = load_users()
    users[str(uid)] = data
    save_users(users)

# --- MAIN MENU GENERATOR ---
def main_menu(is_admin=False):
    kb = [
        [InlineKeyboardButton(text="üîê –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="input_api")],
        [InlineKeyboardButton(text="üì® –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="text")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="chat_id"),
         InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="del_chat")],
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data="start"),
         InlineKeyboardButton(text="‚èπ –°—Ç–æ–ø", callback_data="stop")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
         InlineKeyboardButton(text="‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="interval")],
        [InlineKeyboardButton(text="‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")]
    ]
    if is_admin:
        kb.append([InlineKeyboardButton(text="üëë –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_user")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ...existing code...

def set_user(uid, data):
    users = load_users()
    users[str(uid)] = data
    save_users(users)


def main_menu(is_admin=False):
    kb = [
        [InlineKeyboardButton(text="üîê –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="input_api")],
        [InlineKeyboardButton(text="üì® –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="text")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="chat_id"),
         InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="del_chat")],
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data="start"),
         InlineKeyboardButton(text="‚èπ –°—Ç–æ–ø", callback_data="stop")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
         InlineKeyboardButton(text="‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="interval")],
        [InlineKeyboardButton(text="‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")]  # –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"
    ]
    if is_admin:
        kb.append([InlineKeyboardButton(text="üëë –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_user")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    if not is_user(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu(message.from_user.id == OWNER_ID))


@router.callback_query(F.data == "add_user")
async def add_user_start(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id != OWNER_ID:
        await call.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.", show_alert=True)
        return
    await call.message.answer("–í–≤–µ–¥–∏ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
    await state.set_state(Form.add_user)

@router.message(Form.add_user)
async def add_user_finish(message: types.Message, state: FSMContext):
    try:
        uid = int(message.text.strip())
        users = load_users()
        if str(uid) in users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å.")
        else:
            users[str(uid)] = {}
            save_users(users)
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.")
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id")
    await state.clear()


@router.callback_query(F.data == "input_api")
async def input_api_start(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID:")
    await state.set_state(Form.api_id)

@router.message(Form.api_id)
async def input_api_hash(message: types.Message, state: FSMContext):
    await state.update_data(api_id=int(message.text.strip()))
    await message.answer("üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ API Hash:")
    await state.set_state(Form.api_hash)

@router.message(Form.api_hash)
async def input_phone(message: types.Message, state: FSMContext):
    await state.update_data(api_hash=message.text.strip())
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...")
    await state.set_state(Form.phone)

@router.message(Form.phone)
async def send_code_request(message: types.Message, state: FSMContext):
    data = await state.get_data()
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    phone = message.text.strip()

    client = TelegramClient(StringSession(), api_id, api_hash)
    await client.connect()
    try:
        result = await client.send_code_request(phone)
        await state.update_data(phone=phone, session=client.session.save(), phone_code_hash=result.phone_code_hash)
        await message.answer("üì© –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")
        await state.set_state(Form.code)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
        await client.disconnect()

@router.message(Form.code)
async def input_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    data = await state.get_data()
    client = TelegramClient(StringSession(data['session']), data['api_id'], data['api_hash'])
    await client.connect()
    try:
        await client.sign_in(data['phone'], code, phone_code_hash=data['phone_code_hash'])
        set_user(message.from_user.id, {
            'api_id': data['api_id'],
            'api_hash': data['api_hash'],
            'session': client.session.save(),
            'text': '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            'chats': [],
            'interval': 60
        })
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        await state.clear()
    except SessionPasswordNeededError:
        await message.answer("üîí –í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await state.set_state(Form.password)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await client.disconnect()

@router.message(Form.password)
async def input_2fa_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    client = TelegramClient(StringSession(data['session']), data['api_id'], data['api_hash'])
    await client.connect()
    try:
        await client.sign_in(password=password)
        set_user(message.from_user.id, {
            'api_id': data['api_id'],
            'api_hash': data['api_hash'],
            'session': client.session.save(),
            'text': '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            'chats': [],
            'interval': 60
        })
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {e}")
    await client.disconnect()
    await state.clear()


@router.callback_query(F.data == "text")
async def set_text_start(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Form.text)

@router.message(Form.text)
async def save_text(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    user['text'] = message.text
    set_user(message.from_user.id, user)
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.clear()


@router.callback_query(F.data == "chat_id")
async def set_chat_id_start(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ chat_id –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞. –†–∞–∑–¥–µ–ª—è–π—Ç–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç—ã–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 1"

    )
    await state.set_state(Form.chat_id)

@router.message(Form.chat_id)
async def save_chat_id(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    text = message.text.strip()
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º, –ø—Ä–æ–±–µ–ª–∞–º, –ø–µ—Ä–µ–Ω–æ—Å–∞–º
    items = re.split(r'[\s,]+', text)
    added = []
    duplicates = []

    for item in items:
        if not item:
            continue
        clean_item = item.lstrip('@')

        try:
            cid = int(clean_item)
            if cid not in user['chats']:
                user['chats'].append(cid)
                added.append(str(cid))
            else:
                duplicates.append(str(cid))
        except:
            username = '@' + clean_item
            if username not in user['chats']:
                user['chats'].append(username)
                added.append(username)
            else:
                duplicates.append(username)

    set_user(message.from_user.id, user)

    response = ""
    if added:
        response += "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã:\n" + "\n".join(added) + "\n"
    if duplicates:
        response += "‚ö†Ô∏è –£–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + "\n".join(duplicates) + "\n"
    if not added and not duplicates:
        response = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥."

    await message.answer(response)
    await state.clear()

@router.callback_query(F.data == "del_chat")
async def delete_chat_start(call: types.CallbackQuery, state: FSMContext):
    user = get_user(call.from_user.id)
    if not user['chats']:
        await call.message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return
    chat_list = '\n'.join(f"{i+1}. {cid}" for i, cid in enumerate(user['chats']))
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{chat_list}")
    await state.set_state(Form.delete_chat)

@router.message(Form.delete_chat)
async def delete_chat_finish(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    try:
        idx = int(message.text.strip()) - 1
        cid = user['chats'].pop(idx)
        set_user(message.from_user.id, user)
        await message.answer(f"‚úÖ Chat ID {cid} —É–¥–∞–ª—ë–Ω.")
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
    await state.clear()

@router.callback_query(F.data == "settings")
async def view_settings(call: types.CallbackQuery):
    user = get_user(call.from_user.id)
    await call.message.answer(f"üì® –¢–µ–∫—Å—Ç: {user.get('text')}\nüí¨ –ß–∞—Ç—ã: {user.get('chats')}\n‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {user.get('interval')} —Å–µ–∫.")

@router.callback_query(F.data == "interval")
async def interval_start(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("‚è± –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
    await state.set_state(Form.interval)

@router.message(Form.interval)
async def interval_finish(message: types.Message, state: FSMContext):
    try:
        seconds = int(message.text.strip())
        user = get_user(message.from_user.id)
        user['interval'] = max(5, seconds)
        set_user(message.from_user.id, user)
        await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {seconds} —Å–µ–∫")
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    await state.clear()

@router.callback_query(F.data == "how_to_use")
async def how_to_use_handler(call: types.CallbackQuery):
    instruction = (
        "**–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
        "1. –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ **API id** –∏ **HASH**\n"
        "2. –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–ª–∂–Ω–∞ –∏–¥—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ–π—Ç–∏ –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª\n"
        "3. –î–æ–±–∞–≤–∏—Ç—å –≤ –±–æ—Ç–∞ –∞–π–¥–∏ –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞\n"
        "4. –ü–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–ø—É—Å–∫–∞–µ–º"
    )
    await call.message.answer(instruction)



# --- TASKS & SENDING LOOP ---
tasks = {}

async def send_loop(uid):
    user = get_user(uid)
    if not user:
        return
    async with TelegramClient(StringSession(user['session']), user['api_id'], user['api_hash']) as client:
        while True:
            for chat in user.get('chats', []):
                try:
                    await client.send_message(chat, user.get('text', ''))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await asyncio.sleep(user.get('interval', 60))


@router.callback_query(F.data == "start")
async def start_sending(call: types.CallbackQuery):
    uid = call.from_user.id
    if uid in tasks and not tasks[uid].done():
        await call.message.answer("‚ö†Ô∏è –£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")
        return
    tasks[uid] = asyncio.create_task(send_loop(uid))
    await call.message.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å.")

@router.callback_query(F.data == "stop")
async def stop_sending(call: types.CallbackQuery):
    uid = call.from_user.id
    if uid in tasks:
        tasks[uid].cancel()
        await call.message.answer("üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        await call.message.answer("‚ùó –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
